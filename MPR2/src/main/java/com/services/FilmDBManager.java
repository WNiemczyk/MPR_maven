package com.services;

import java.sql.*;
import java.util.*;
import com.project.films.Film;
import com.project.statuses.FilmStatus;

public class FilmDBManager {

	private Connection connection;
	private Statement statement;
	private PreparedStatement addFilmStatement;
	private PreparedStatement getFilmStatement;
	private PreparedStatement deleteFilmStatement;

	public FilmDBManager() {

		try {

			connection = DriverManager
					.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

			statement = connection.createStatement();
			boolean filmTableExists = false;

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);

			while (rs.next()) {
				if ("Film".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					filmTableExists = true;
					break;
				}
			}

			if (!filmTableExists) {
				statement
						.executeUpdate("CREATE TABLE film(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, title varchar(20), director varchar(40), year integer, status varchar(20))");
			}

			addFilmStatement = connection
					.prepareStatement("INSERT INTO film (title, director, year, status) VALUES (?, ?, ?, ?)");

			getFilmStatement = connection
					.prepareStatement("SELECT id, title, director, year, status FROM film");
		
			deleteFilmStatement = connection
					.prepareStatement("DELETE FROM film");

		}

		catch (SQLException e) {

			e.printStackTrace();

		}
	}

	public void addFilm(Film film) {
		
		try {

			addFilmStatement.setString(1, film.getTitle());
			addFilmStatement.setString(2, film.getDirector());
			addFilmStatement.setInt(3, film.getYear());
			addFilmStatement.setString(4, film.getStatus().toString()); // obiekt
			addFilmStatement.executeUpdate();
		
		}

		catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public void addFilms(List<Film> films) {

		for (Film f : films)
			addFilm(f);
	}

	
	public int getIdFilmByTitle(String t) {

		int id = 0;
		List<Film> films = getAllFilms();
		
		
		
		return id;
	}

	public List<Film> getAllFilms() {

		List<Film> films = new ArrayList<Film>();

		try {

			ResultSet rs = getFilmStatement.executeQuery();

			while (rs.next()) {

				FilmStatus status = null;

				if (rs.getString("status").equals("Available"))
					status = FilmStatus.Available;
				if (rs.getString("status").equals("Borrowed"))
					status = FilmStatus.Borrowed;
				if (rs.getString("status").equals("Reserved"))
					status = FilmStatus.Reserved;
				
				films.add(new Film(rs.getString("title"), rs
						.getString("director"), rs.getInt("year"), status));
			}

		}

		catch (SQLException e) {

			e.printStackTrace();
		}

		return films;
	}

	public void deleteAllFilms() {

		try {

			deleteFilmStatement.executeUpdate();
		}

		catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
